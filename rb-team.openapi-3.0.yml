openapi: "3.0.0"
info:
  description: "Radio Bretzel Team API reference."
  version: "0.2.0"
  title: "rb-team"
  contact:
    email: "radiobretzel@ntymail.com"
  license:
    name: "GPL-3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.html"


tags:
  - name: Team
    description: >
      Manage your Radio Bretzel team !
  - name: Authentication
    description: >
      Handling of login, registration and sessions
  - name: Members
    description: >
      Team members are people like you and me sharing their music
  - name: Channels
    description: >
      Channels are rooms to chat and listen to music with friends !
  - name: Sources
    description: >
      Sources are process creating the audio that will be streamed
  - name: Admin
    description: >
      Restricted admin area




paths:

  /team:
    summary: Instance information

    get:
      summary: Returns information about Team
      description: >
        Returns basic information about the Team.
      operationId: getTeam
      tags:
        - Team

      security:
        - rbadminUsers:
          - member

      responses:
        '200':
          description: >
            Returns team object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    put:
      summary: Update information about Team
      description: >
        Allow chief to update the current Team information
      operationId: updateTeam
      tags:
        - Team

      security:
        - rbadminUsers:
          - chief

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: >
                    Team name
                  type: string
                  maxLength: 128
                description:
                  description: >
                    Team description
                  type: string
                  maxLength: 4096
                logo:
                  description: >
                    Team logo encoded in base64. Max 128px*128px
                  type: string
                  format: base64
                icon:
                  description: >
                    Team icon encoded in base64. Max 32px*32px
                  type: string
                  format: base64
            encoding:
              logo:
                contentType: image/jpeg, image/png
              icon:
                contentType: image/jpeg, image/png

      responses:
        '200':
          description: >
            Returns updated team object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /config:
    summary: Access to Team configuration

    get:
      summary: Returns a few information about team configuration
      description: >
        Allow chief to view Team configuration
      operationId: getTeamConfig
      tags:
        - Team

      security:
        - rbadminUsers:
          - chief

      responses:
        '200':
          description: >
            Returns the Team Config object,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /profile:
    summary: Handles member's profile

    get:
      summary: Returns current member's profile
      description: >
        Returns connected member's profile.
      operationId: getProfile
      tags:
        - Members

      security:
        - rbadminUsers:
          - member

      responses:
        '200':
          description: Member's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    put:
      summary: Updates current member's profile
      description: >
        Update the currently connected member's profile
      operationId: updateProfile
      tags:
        - Members

      security:
        - rbadminUsers:
          - member

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  description: >
                    Member's email address
                name:
                  description: >
                    Member's name
                  type: string
                  maxLength: 128
                password:
                  description: >
                    Member's password
                  type: string
                  format: password
                description:
                  description: >
                    Member's description, bio
                  type: string
                  maxLength: 4096
                avatar:
                  description: >
                    Member's avatar encoded in base64. Max size 128px*128px
                  type: string
                  format: base64

      responses:
        '200':
          description: Member's updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    delete:
      summary: Delete current member
      description: >
        Delete the current member's account. Implies logout.
      operationId: deleteMember
      tags:
        - Members

      security:
        - rbadminUsers:
          - member

      parameters:
        - in: query
          name: 'password'
          description: >
            Member's password should be provided in order to confirm deletion
          schema:
            type: string

      responses:
        '200':
          description: Member has been successfully deleted
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /members:
    summary: Get a list of team members

    get:
      summary: Returns a list of members matching the given filters
      description: >
        Returns a list of team members from the given filters.
      operationId: getMembers
      tags:
        - Members

      security:
        - rbadminUsers:
          - members

      parameters:
        - in: query
          name: 'slug'
          description: >
            Filter user by slug. Prefer HTTP GET /member/slug
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'
        - $ref: '#/components/parameters/MemberEmailQuery'
        - $ref: '#/components/parameters/MemberNameQuery'
        - $ref: '#/components/parameters/MemberIsChiefQuery'

      responses:
        '200':
          description: List of team members matching the given filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /member/{slug}:
    summary: Handles a single member
    
    get:
      summary: Returns Member's profile
      description: >
        Returns the profile of the member corresponding to the given slug
      operationId: getMember
      tags:
        - Members

      security:
        - rbadminUsers:
          - members

      parameters:
        - $ref: '#/components/parameters/MemberSlugPath'

      responses:
        '200':
          description: Member's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Updates Member's object
      description: >
        Returns the updated Member's object.
      operationId: updateMember
      tags:
        - Members

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/MemberSlugPath'
        -

    delete:


  /channels:
    summary: List channels objects

    get:
      summary: Return a list of all channels matching the given filters
      description: >
        Returns a list of channels from the given filters. If user is chief,
        it would obtain complete information about channels. If user is only a
        member, it would obtain some reduced information. See parameters for
        more details
      operationId: getChannels
      tags:
        - Channels

      security:
        - rbadminUsers:
          - member

      parameters:
        - in: query
          name: 'slug'
          description: >
            Filter channels by slug. This slug must be alphanumeric and lowercase
            only. It can contain but can't start nor end with one or two max
            dashes (-). Prefer HTTP GET `/channel/{slug}`
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'
        - $ref: '#/components/parameters/ChannelNameQuery'
        - $ref: '#/components/parameters/ChannelArchivedQuery'

      responses:
        '200':
          description: List of all channels of the team from the given filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /channel/{slug}:
    summary: Handles a channel

    parameters:
      - $ref: '#/components/parameters/ChannelSlugPath'

    get:
      summary: Return the channel object corresponding to the given slug
      description: >
        Return the channel object corresponding to the given slug. If user is chief,
        it would obtain complete information about channels. If user is only a member, it
        would obtain some reduced information. See parameters for more details
      operationId: getChannelBySlug
      tags:
        - Channels

      security:
        - rbadminUsers:
          - member

      responses:
        '200':
          description: Channel object corresponding to the given slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      summary: Create a new channel
      description: >
        Create a new channel with the given arguments. If no name is given, slug
        will be used by default. Slug must be unique, and passing an already
        existing slug as an argument will result by a `409 - Conflict` HTTP response.
      tags:
        - Channels

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/ChannelNameQuery'
        - $ref: '#/components/parameters/ChannelDescriptionQuery'

      responses:
        '201':
          description: "Channel was successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'


    put:
      summary: Update an existing channel information
      description: >
        Update an existing channel information from the given args, and return
        the updated channel object.
      operationId: updateChannel
      tags:
        - Channels

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/ChannelNameQuery'
        - $ref: '#/components/parameters/ChannelDescriptionQuery'
        - $ref: '#/components/parameters/ChannelArchivedQuery'

      responses:
        '200':
          description: Updated channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


    delete:
      summary: Delete the channel object corresponding to the given slug
      description: >
        Delete the channel object corresponding to the given slug.
      operationId: deleteChannel
      tags:
        - Channels

      security:
        - rbadminUsers:
          - chief

      responses:
        '200':
          description: Deleted channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /sources:
    summary: List sources objects

    get:
      summary: Return a list of all sources matching the given filters
      description: >
        Returns a list of sources from the given filters.
      operationId: getSources
      tags:
        - Sources

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/SourceTypeQuery'
        - $ref: '#/components/parameters/SourceStatusQuery'

      responses:
        '200':
          description: List of all sources of the team from the given filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /channel/{slug}/source:
    summary: Handles a specific channel's source

    parameters:
      - $ref: '#/components/parameters/ChannelSlugPath'

    get:
      summary: Retrieve specific channel's source information
      description: >
        Returns an object corresponding to the given channel's source. If user
        is only member, it will recieve some reduced information.
      operationId: getChannelSource
      tags:
        - Sources

      security:
        - rbadminUsers:
          - member

      parameters:
        - $ref: '#/components/parameters/ChannelSlugPath'

      responses:
        '200':
          description: Source's object of the given channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      summary: Create source for the given channel
      description: >
        Create a new source object for the given channel. Sources are unique and
        cannot exist without a channel. If the specified channel already has a
        source, or if a source with this name already exists, a `409 - Conflict`
        HTTP error is responded.
      operationId: createChannelSource
      tags:
        - Sources

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/SourceTypeQuery'
        - in: query
          name: 'engine'
          description: >
            For external source only. Will be ignored otherwise.
            Subtype of external audio stream
          schema:
            type: string
            enum:
              - http
        - in: query
          name: 'uri'
          description: >
            For external HTTP source only. Will be ignored otherwise.
            External stream URI
          schema:
            type: string
            format: url

      responses:
        '200':
          description: Source's object corresponding to the given channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    delete:
      summary: Delete the source of the given channel
      description: >
        Delete the source of the specified channel.
      operationId: deleteChannelSource
      tags:
        - Sources

      security:
        - rbadminUsers:
          - chief

      parameters:
        - $ref: '#/components/parameters/ChannelSlugPath'

      responses:
        '200':
          description: Channel object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /channel/{slug}/source/start:
    summary: Starts given channel's source

    parameters:
      - $ref: '#/components/parameters/ChannelSlugPath'

    post:
      summary: Starts given channel's source
      description: >
        Starts given channel's source. If channel's doesn't have a source, a
        `404` HTTP error is returned.
      operationId: startChannelSource
      tags:
        - Sources

      security:
        - rbadminUsers:
          - chief

      responses:
        '200':
          description: Source's object corresponding to the given slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /channel/{slug}/source/stop:
    summary: Stops given channel's source

    parameters:
      - $ref: '#/components/parameters/ChannelSlugPath'

    post:
      summary: Stops given channel's source
      description: >
        Stops given channel's source. If channel's doesn't have a source, a
        `404` HTTP error is returned.
      operationId: stopChannelSource
      tags:
        - Sources

      security:
        - rbadminUsers:
          - chief

      responses:
        '200':
          description: Channel's object corresponding to the given slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /admin:
    summary: Team administration endpoint

    get:
      summary: Get detailed information about team
      description: >
        Returns a dictionnary containing all information relative to the current
        team
      operationId: getAdmin
      tags:
        - Admin

      responses:
        '200':
          description: List of all sources of the team from the given filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /admin/sources:
    summary: List sources objects

    get:
      summary: Return a list of all sources matching the given filters
      description: >
        Returns a list of sources from the given filters.
      operationId: adminGetSources
      tags:
        - Admin

      security:
        - rbadminUsers:
          - admin

      parameters:
        - $ref: '#/components/parameters/SourceTypeQuery'
        - $ref: '#/components/parameters/SourceStatusQuery'

      responses:
        '200':
          description: List of all sources of the team from the given filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /admin/source/{channel}:
    summary: Handles the given source

    parameters:
      - $ref: '#/components/parameters/SourceChannelPath'

    get:
      summary: Get info about the given source
      description: >
        Returns information about the given source.
      operationId: getAdminSource
      tags:
        - Admin

      security:
        - rbadminUsers:
          - admin

      responses:
        '200':
          description: Source information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Source'
                  - type: object
                    properties:
                      current_listeners:
                        type: integer

        '400':
          $ref: '#/components/responses/ValidationFailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'




components:
  securitySchemes:

    rbadminUsers:
      type: oauth2
      description: >
        Main oAuth2 server for Radio Bretzel users authentication and autorization
      flows:
        implicit:
          authorizationUrl:   https://api.radiobretzel.org/oauth/authorize
          scopes:
            member: Logged user default role
            chief:  Team Chief role. Equivalent to team administrator
            source: Special scope for sources
            admin:  Special scope for rbadmin module for multi-team administration


  responses:
    ValidationFailed:
      description: Some given arguments were incorrect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Access is restricted to logged users.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Access is refused due to unsufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The resource asked was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: >
        The resource could not be created because a resource with the given
        identifier already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    SourceError:
      description: The source operation went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Something went wrong on our side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  parameters:

    MemberSlugPath:
      in: path
      name: 'slug'
      description: >
        Team Member slug. This slug must be alphanumeric and lowercase only. It
        can contain but can't start nor end with one or two max dashes (-).
      required: true
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'

    MemberEmailQuery:
      in: query
      name: 'email'
      description: >
        Team Member email address
      schema:
        type: string
        format: email

    MemberNameQuery:
      in: query
      name: 'name'
      description: Member's display name
      schema:
        type: string
        minLength: 2
        maxLength: 128

    MemberDescriptionQuery:
      in: query
      name: 'description'
      description: >
        Member's description, little bio.
      schema:
        type: string
        maxLength: 4096

    MemberIsChiefQuery:
      in: query
      name: 'is_chief'
      description: >
        Set to true if member is chief
      schema:
        type: boolean

    ChannelSlugPath:
      in: path
      name: 'slug'
      description: >
        Channel's unique identifier. This slug must be alphanumeric and lowercase only. It
        can contain but can't start nor end with one or two max dashes (-).
      required: true
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'

    ChannelNameQuery:
      in: query
      name: 'name'
      description: Channel common name
      schema:
        type: string
        maxLength: 128

    ChannelDescriptionQuery:
      in: query
      name: 'description'
      description: >
        Channel description. Write any thing you want !
      schema:
        type: string
        maxLength: 4096

    ChannelArchivedQuery:
      in: query
      name: 'archived'
      description: >
        Allows chief to request archived channels. This parameter is forbidden
        for chief scpoed users, and using it will return a HTTP 400 response.
      schema:
        type: boolean
        default: false

    SourceChannelPath:
      in: path
      name: 'channel'
      description: >
        Source's parent channel slug
      required: true
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'

    SourceTypeQuery:
      in: query
      name: 'type'
      description: >
        Source type. See Source model for more.
      schema:
        type: string
        enum:
          - internal
          - external

    SourceStatusQuery:
      in: query
      name: 'status'
      description: >
        Source status filter
      schema:
        type: string
        enum:
          - playing
          - stopped
          - dead


  schemas:

    Team:
      description: >
        Team Information. Accessible to members to read, chiefs only to write
      type: object
      properties:
        name:
          description: >
            Team name
          type: string
          maxLength: 128
          default: "Radio Bretzel Team"
        description:
          description: >
            Team decription, welcome text.
          type: string
          maxLength: 4096
          default: >
            Welcome to your Radio Bretzel Team ! Discover its channels and say
            hi to your friends !
        logo:
          description: >
            Team logo encoded in base64. Max size 128px*128px
          type: string
          format: base64
        icon:
          description: >
            Team icon encoded in base64. Max size 32px*32px
          type: string
          format: base64

    Member:
      description: >
        Team Member object. Members are regular users in a team.
      type: object
      properties:
        slug:
          description: >
            Member's "username" used as unique identifier, with email address.
          type: string
          minLength: 2
          maxLength: 64
          pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'
        email:
          description: >
            Member's email address used as unique identifier with slug.
          type: string
          format: email
        password:
          description: >
            Member's password
        name:
          description: >
            Member's display name
          type: string
          minLength: 2
          maxLength: 128
        description:
          description: >
            Member's description, bio, introduction text.
          type: string
          maxLength: 4096
        avatar:
          description: >
            Member's avatar, encoded in base64. Max size 128px*128px
          type: string
          format: base64
        is_chief:
          description: >
            Set at true if user is chief
          type: boolean
          default: false
      required:
        - slug
        - email

    Channel:
      description: >
        Channels are rooms to chat and listen to music with friends
      type: object
      properties:
        slug:
          description: >
            Channel unique identifier.
          type: string
          minLength: 2
          maxLength: 64
          pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'
        name:
          description: >
            Channel common name
          type: string
          maxLength: 128
        description:
          description: >
            Channel public description.
          type: string
          maxLength: 4096
        archived:
          description: >
            Soft delete Channel attribute
          type: boolean
          default: false
        source:
          $ref: '#/components/schemas/Source'
      required:
        - slug
        - archived

    Source:
      description: >
        Sources represent audio streams
      type: object
      properties:
        channel:
          description: >
            Parent channel's slug. It is used as a primary key
          type: string
          minLength: 2
          maxLength: 64
          pattern: '^([a-z][a-z0-9]*)((?:-[a-z0-9]+){0,2})$'
        type:
          description: >
            Source type. Can be internal, as generated by Radio Bretzel, or
            HTTP, as an exiting external stream.
          type: string
          enum:
            - internal
            - http
          default: internal
        status:
          description: >
            Source status is dynamically retrieved. The way to retrieve this
            status depends on the source engine (see `Source.config`).
            When source is functionnal, its status is set to `playing`.
            When source is disabled, its status is set to `stopped`.
            If in any other case, the `dead` status should be used, and alerts
            sent to chief in order
          type: string
          enum:
            - playing
            - stopped
            - dead
        endpoint:
          description: >
            Source public endpoint. This represents the url the user will use
            to connect to the audio stream. It is automatically generated using
            the `RBSTREAM_SERVER` and `RBSTREAM_PORT` configuration attributes
            and `Source.channel` slug.
          type: string
          format: url
        config:
          description: >
            Source configuration. This attribute is available to chief and admin
            only, members are not allowed to view it. Check both types schemas
            to learn more.
          oneOf:
            - $ref: '#/components/schemas/SourceInternal'
            - $ref: '#/components/schemas/SourceHTTP'
          discriminator:
            propertyName: type
            mapping:
              internal: SourceInternal
              http: SourceHTTP
      required:
        - channel
        - config
        - endpoint

    SourceInternal:
      description: >
        Groups all internal sources engines. These can only be edited by admin
        through team configuration.
      allOf:
        - type: object
          required:
            - engine
          properties:
            engine:
              description: >
                Source engine represents the way audio stream will be generated
              type: string
              enum:
                - docker
        - oneOf:
          - $ref: '#/components/schemas/SourceInternalDocker'
          discriminator:
            propertyName: engine
            mapping:
              docker: '#/components/schemas/SourceInternalDocker'

    SourceInternalDocker:
      description: >
        Handle an audio running in a docker container
      type: object
      required:
        - docker_uri
        - image
      properties:
        docker_uri:
          type: string
          description: >
            The docker API endpoint. Loaded from team configuration
          format: uri
          readOnly: true
        image:
          type: string
          description: >
            Docker image name and tag. Loaded from team configuration
          pattern: '^(?:.+/)?([^:]+)(?::.+)?$'
          readOnly: true
        container_id:
          type: string
          description: >
            Source's Docker container id
          readOnly: true
        container_name:
          type: string
          description: >
            Source's Docker container name
          readOnly: true
        command:
          type: string
          description: >
            Docker command used at container's runtime
          readOnly: true
        environment:
          type: object
          description: >
            Environment variables dictionnary loaded from team configuration
          properties:
            RBSOURCE_CHANNEL_SLUG:
              description: >
                automatically set using `Source.channel`
              type: string
            RBSOURCE_RBTRACKMAN_URI:
              description: >
                automatically set using team configuration
              type: string
          additionalProperties:
            type: string
          required:
            - RBSOURCE_CHANNEL_SLUG
            - RBSOURCE_RBTRACKMAN_URI
        networks:
          type: array
          description: >
            Docker networks our source container should connect to, as an array
            of Docker network names loaded from team configuration
          items:
            type: string
          readOnly: true

    SourceHTTP:
      description: >
        External HTTP existing source.
      type: object
      properties:
        uri:
          description: >
            External HTTP audio stream url
          type: string
          format: url
      required:
        - uri

    Config:
      description: >
        Team main configuration object. This configuration is stored in database
        and is updatable by admins (if this team is attached to a Radio Bretzel
        Admin module)
      type: object
      properties:
        members_limit:
          description: >
            Maximum number of members allowed to join the team.
          type: integer
          minimum: 1
        channels_limit:
          description: >
            Maximum number of channels allowed in the team.
          type: integer
          minimum: 1

    Error:
      description: >
        Standard Radio Bretzel Core error.
      type: object
      properties:
        code:
          description: >
            HTTP error code
          type: string
        message:
          description: >
            Error message. Can be string or object, depending of the error
          type: string
      required:
        - code
        - message
